datasource db {
  provider = "postgresql"
  url      = "postgres://default:eTWcvfbXG0l9@ep-dark-star-a4toikpz.us-east-1.aws.neon.tech:5432/verceldb?sslmode=require"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          Role            @default(USER)
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Content   Content[]
  Comment   Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Content {
  id     String      @id @default(cuid())
  path   String      @unique
  userId String
  type   ContentType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Image     Image[]
  Comment   Comment[]
  published Boolean
}

model Image {
  id            String @id @default(cuid())
  cloudinaryUrl String @unique
  blurBase64Url String
  contentId     String

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ContentType {
  POST
  WORK
}
